// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// try to set up schema for the database
model User {
  id           String        @id @default(uuid())
  first_name   String
  last_name    String
  email        String        @unique
  password     String
  role         Role          @default(USER)
  created_at   DateTime      @default(now())
  update_at    DateTime      @updatedAt
  status       AccountStatus @default(PENDING)
  auth         Auth[]
  order_groups OrderGroup[]
  ratings      Rating[]
  redeemed     Redeem[]
  comments     Comment[]
  wishlists    Wishlist[]
  Product      Product[]
  Item         Item[]
  Cart         Cart[]
  CardPayment  CardPayment[]
}

model UserValidation {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model Auth {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [user_id], references: [id])
  user_id       String
  access_token  String
  refresh_token String
}

model Wishlist {
  id            Int     @id @default(autoincrement())
  product       Product @relation(fields: [product_id], references: [id])
  product_id    Int
  wishlist_name String  @default("default")
  user          User    @relation(fields: [user_id], references: [id])
  user_id       String
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String
  products      Product[]
}

model Invoice {
  id             Int           @id @default(autoincrement())
  payment_id     String        @default(uuid())
  amount         Float
  order          Order         @relation(fields: [order_id], references: [id])
  order_id       Int
  payment_method PaymentMethod
  payment_status PaymentStatus
}

// add revenue and debt tracking
model Order {
  id             Int         @id @default(autoincrement())
  order_group    OrderGroup  @relation(fields: [order_group_id], references: [id])
  order_group_id Int
  product        Product     @relation(fields: [product_id], references: [id])
  product_id     Int
  quantity       Int
  status         OrderStatus @default(PENDING)
  Invoice        Invoice[]
}

// prefer using this pattern in contrast to prisma many to many.
// Leave it like this. It helps me map to SQL in my brain
model OrderGroup {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  orders       Order[]
  address      String
  first_name   String
  last_name    String
  phone_number String
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String
}

model Discount {
  id            Int      @id @default(autoincrement())
  discount_code String
  discount_name String
  percent       Decimal
  created       DateTime @default(now())
  ends          DateTime
  redeemer      Redeem[]
}

model Redeem {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  discount    Discount @relation(fields: [discount_id], references: [id])
  discount_id Int
}

model Cart {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
  quantity   Int
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

model Item {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  price       Decimal
  user        User        @relation(fields: [user_id], references: [id])
  user_id     String
  ItemGroup   ItemGroup[]
}

// prefer using this pattern in contrast to prisma many to many.
// Leave it like this. It helps me map to SQL in my brain
model ItemGroup {
  id         Int     @id @default(autoincrement())
  item       Item    @relation(fields: [item_id], references: [id])
  item_id    Int
  product    Product @relation(fields: [item_id], references: [id])
  product_id Int
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  excerpt     String
  description String
  price       Float
  discount    Int         @default(0)
  wishlist    Wishlist[]
  cart        Cart[]
  order       Order[]
  category    Category[]
  comments    Comment[]
  rating      Rating[]
  stock       Int
  ItemGroup   ItemGroup[]
  user        User        @relation(fields: [user_id], references: [id])
  user_id     String
  created_at  DateTime    @default(now())
}

model Rating {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  rating     Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
}

model Comment {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
}

model CardPayment {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [user_id], references: [id])
  user_id    String
  total      Float
  cart_items Json
}

model Images {
  id Int @id @default(autoincrement())
}

model ImagesGroup {
  id Int @id @default(autoincrement())
  // first_name
}

enum OrderStatus {
  CANCELLED
  PENDING
  FUFILLED
}

enum PaymentStatus {
  PAID
  NOT_PAID
}

enum AccountStatus {
  PENDING
  DELETED
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  SUPER
  ADMIN
  VENDOR
}

enum PaymentMethod {
  CARD
  CASH
}
